{"version":3,"file":"svg-to-inline.js","sources":["../node_modules/lit-html/lib/directive.js","../node_modules/lit-html/lib/dom.js","../node_modules/lit-html/lib/part.js","../node_modules/lit-html/lib/template.js","../node_modules/lit-html/lib/template-instance.js","../node_modules/lit-html/lib/template-result.js","../node_modules/lit-html/lib/parts.js","../node_modules/lit-html/lib/default-template-processor.js","../node_modules/lit-html/lib/template-factory.js","../node_modules/lit-html/lib/render.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/modify-template.js","../node_modules/lit-html/lib/shady-render.js","../node_modules/lit-element/lib/updating-element.js","../node_modules/lit-element/lib/css-tag.js","../node_modules/lit-element/lit-element.js","../src/SvgToInline.js","../node_modules/throttle-debounce/dist/index.esm.js","../src/svg-to-inline.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                // tslint:disable-next-line:no-any no symbol in index\n                const oldValue = this[name];\n                // tslint:disable-next-line:no-any no symbol in index\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete before\n        // connection and if one is pending connection the `_hasConnectionResolver`\n        // will exist. If so, resolve it to complete the update, otherwise\n        // requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.0.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import { html, css, LitElement, svg } from 'lit-element';\nimport { throttle } from 'throttle-debounce';\n\nexport default class SvgToInline extends LitElement {\n  static get properties() {\n    return {\n      path: { type: String },\n      placeholder: { type: Boolean },\n      lazy: { type: Boolean },\n      'class-name': { type: String },\n      svgDOM: { type: String },\n      loadingLabel: { type: String },\n    };\n  }\n\n  createRenderRoot() {\n    return this;\n  }\n\n  extractClassNames(svg) {\n    let element = svg;\n\n    if (!svg.match(/<svg[\\w\\s\\t\\n:=\"\\\\'/.#-]+ class=\"(.*?)\"/)) {\n      element = svg.replace(/(<svg[\\w\\s\\t\\n:=\"\\\\'/.#-]+)/, '$1 class=\" \"');\n    }\n\n    const svgClass =\n      element.match(/<svg[\\w\\s\\t\\n:=\"\\\\'/.#-]+ class=\"(.*?)\"/) &&\n      element.match(/class=\"(.*?)\"/)[1].split(' ');\n    const classToAdd = (this['class-name'] && this['class-name'].split(' ')) || [];\n    const allClasses = [...svgClass, ...classToAdd].filter(classname => classname);\n    const newClasses = [...new Set(allClasses)].join(' ');\n\n    return element.replace(\n      /(<svg[\\w\\s\\t\\n:=\"\\\\'/.#-]+) class=\"[\\w\\s-_]+?\"/,\n      `$1 class=\"${newClasses}\"`,\n    );\n  }\n\n  static clean(svg) {\n    // Remove comments\n    return svg.replace(/<!--[\\s\\w\"-/:=?><]+-->/g, '');\n  }\n\n  static parse(element) {\n    const parsedHtml = new DOMParser().parseFromString(element, 'text/html');\n    console.log('parsedHtml ', parsedHtml);\n    const parsedElement = parsedHtml.body.firstChild;\n\n    return parsedElement;\n  }\n\n  static async fetchFile(path) {\n    try {\n      const response = await (await fetch(path)).text();\n      return response;\n    } catch (error) {\n      return new Error(error);\n    }\n  }\n\n  lazyLoad = () => {\n    if (this.offsetTop < window.innerHeight + window.pageYOffset + 300) {\n      this.removeListeners();\n\n      return this.svg();\n    }\n  };\n\n  svg() {\n    return SvgToInline.fetchFile(this.path).then(svg => {\n      // let svgElement = SvgToInline.clean(svg);\n      let svgElement = svg;\n      svgElement = this.extractClassNames(svgElement);\n      this.svgDOM = svgElement;\n    });\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has('path')) {\n      this.removeListeners();\n      this.init();\n    } else if (changedProperties.has('className') && this.svgDOM) {\n      this.svgDOM = this.extractClassNames(this.svgDOM);\n    }\n\n    return false;\n  }\n\n  addListeners() {\n    window.addEventListener('scroll', this.callFunction);\n    window.addEventListener('resize', this.callFunction);\n    window.addEventListener('orientationchange', this.callFunction);\n  }\n\n  removeListeners() {\n    window.removeEventListener('scroll', this.callFunction);\n    window.removeEventListener('resize', this.callFunction);\n    window.removeEventListener('orientationchange', this.callFunction);\n  }\n\n  init() {\n    if (this.lazy) {\n      this.addListeners();\n      return this.lazyLoad();\n    }\n\n    return this.svg();\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    if (this.path) {\n      this.init();\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeListeners();\n  }\n\n  constructor() {\n    super();\n\n    this.loadingLabel = 'Loading...';\n    this.callFunction = throttle(400, this.lazyLoad);\n  }\n\n  render() {\n    const a = '<!--tetet-->';\n    return html`\n      ${this.svgDOM\n        ? html`\n            ${SvgToInline.parse(this.svgDOM)}\n          `\n        : html`\n            <span>${this.loadingLabel}</span>\n          `}\n    `;\n  }\n}\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nfunction throttle (delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    var args = arguments;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, args);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\n\nfunction debounce (delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexport { throttle, debounce };\n","import SvgToInline from './SvgToInline.js';\n\nwindow.customElements.define('svg-to-inline', SvgToInline);\n"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","start","end","n","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","length","values","node","nextNode","nodeType","hasAttributes","attributes","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","s","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","this","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","super","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","getTemplateElement","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Object","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","finalize","_classProperties","p","attr","_attributeNameForProperty","_attributeToPropertyMap","hasOwnProperty","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","prototype","defineProperty","oldValue","_requestUpdate","configurable","enumerable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","assign","appendInto","litRender","delete","SvgToInline","path","placeholder","lazy","svgDOM","loadingLabel","extractClassNames","svg","replace","allClasses","filter","classname","newClasses","parsedHtml","DOMParser","parseFromString","log","body","fetch","error","fetchFile","then","svgElement","removeListeners","init","addListeners","callFunction","lazyLoad","disconnectedCallback","offsetTop","innerHeight","pageYOffset","delay","noTrailing","callback","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","self","elapsed","Date","now","args","arguments","apply","setTimeout","cancel","throttle","define"],"mappings":"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"}